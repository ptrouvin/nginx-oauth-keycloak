daemon off;
worker_processes {{ NGINX_WORKER_PROCESSES }} ;
error_log {{ NGINX_LOG_ERROR }} ;

pid /tmp/nginx.pid ;

events {
    worker_connections {{ NGINX_WORKER_CONNECTIONS }} ;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    log_format  json  '{ "@timestamp": "$time_iso8601", '
                      '"@fields": { '
                      '"remote_addr": "$remote_addr", '
                      '"http_x_forwarded_for": "$http_x_forwarded_for", '
                      '"last_http_x_forwarded_for": "$last_http_x_forwarded_for", '
                      '"first_http_x_forwarded_for": "$first_http_x_forwarded_for", '
                      '"host": "$host", '
                      '"remote_user": "$remote_user", '
                      '"upstream_cache_status": "$upstream_cache_status", '
                      '"upstream_response_time": "$upstream_response_time", '
                      '"upstream_status": "$upstream_status", '
                      '"body_bytes_sent": "$body_bytes_sent", '
                      '"bytes_sent": "$bytes_sent", '
                      '"request_length": "$request_length", '
                      '"request_time": "$request_time", '
                      '"status": "$status", '
                      '"uri": "$uri", '
                      '"request": "$request", '
                      '"scheme": "$scheme", '
                      '"server_protocol": "$server_protocol", '
                      '"request_method": "$request_method", '
                      '"request_completion": "$request_completion", '
                      '"connection": "$connection", '
                      '"connection_requests": "$connection_requests", '
                      '"http_referrer": "$sent_http_http_referer", '
                      '"content_length": "$sent_http_content_length", '
                      '"content_type": "$sent_http_content_type", '
                      '"gzip_ratio": "$gzip_ratio", '
                      '"http_user_agent": "$http_user_agent" } }';

    access_log  {{ NGINX_LOG_ACCESS }} {{ NGINX_LOG_FORMAT }} ;

    sendfile            on;
    directio 		8m;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   20s;
    types_hash_max_size 2048;
    server_tokens	off;
    more_clear_headers Server;

    # allow the server to close the connection after a client stops responding. Frees up socket-associated memory.
    # send the client a "request timed out" if the body is not loaded by this time. Default 60.
    # If the client stops reading data, free up the stale client connection after this much time. Default 60.
    reset_timedout_connection on;
    client_body_timeout 10;
    client_header_timeout 10;
    send_timeout 8;

    # cache open files and errors info (not files)
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # rate limit connexions per sec
    limit_conn_zone $first_http_x_forwarded_for zone=addr:50m;
    limit_conn_log_level error;
    limit_conn_status 509;

    # rate limit requests per sec
    # limit to 4 req per sec based on the x-forwarded IP
    # override this in every vhost by using limit_req zone=one burst=6; in a location block for a 6 req/s
    limit_req_log_level error;
    limit_req_status 509;
    limit_req_zone $last_http_x_forwarded_for zone=reqpers:50m rate=4r/s;

    include             /opt/nginx/conf/mime.types;
    default_type        application/octet-stream;
	
	
	{% if NGINX_AUTH_KEYCLOAK_GEOIP is defined %}
	geo $block_by_ip {
		default         1;
		# syntax:   IP/MASK_LENGTH 0=authorized|1=forbidden
		# example:   10.235.8.0/25 0;
		  {% set ADD_GEOIP=NGINX_AUTH_KEYCLOAK_GEOIP.split('|') %}
		  {% for ip_mask in ADD_GEOIP %}
		{{ ip_mask }} 0;
		  {% endfor %}
	}
	{% endif %}
	
{% if NGINX_AUTH_METHOD == 'keycloak' %}
	lua_package_path "./?.lua;{{ NGINX_AUTH_KEYCLOAK_LUAPATH }}/?.lua;;";
{% endif %}

	
    server {
        include /opt/nginx/conf.d/default.conf;
    }
}
